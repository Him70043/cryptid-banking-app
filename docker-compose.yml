version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: cryptid_db
    environment:
      POSTGRES_DB: cryptid
      POSTGRES_USER: cryptid_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secure_password_123}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - cryptid_network
    restart: unless-stopped

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: cryptid_redis
    ports:
      - "6379:6379"
    networks:
      - cryptid_network
    restart: unless-stopped

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: cryptid_backend
    environment:
      - FLASK_ENV=development
      - DATABASE_URL=postgresql://cryptid_user:${DB_PASSWORD:-secure_password_123}@db:5432/cryptid
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-dev_secret_key_change_in_production}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-jwt_secret_change_in_production}
    volumes:
      - ./backend:/app
      - ./ml-engine:/app/ml_engine
    ports:
      - "5000:5000"
    depends_on:
      - db
      - redis
    networks:
      - cryptid_network
    restart: unless-stopped

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: cryptid_frontend
    environment:
      - REACT_APP_API_URL=http://localhost:5000/api
      - REACT_APP_ENV=development
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - cryptid_network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: cryptid_nginx
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - frontend
      - backend
    networks:
      - cryptid_network
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  cryptid_network:
    driver: bridge